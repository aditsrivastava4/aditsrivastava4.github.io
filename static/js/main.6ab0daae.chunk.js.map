{"version":3,"sources":["components/about/index.jsx","components/blog/index.jsx","components/navbar/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["About","Grid","md","lg","item","container","className","style","Typography","variant","href","Component","Blog","textAlign","NavBar","AppBar","position","Toolbar","Button","color","target","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ab0daae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Grid, Typography\r\n} from '@material-ui/core';\r\n\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <Grid md={12} lg={12} item>\r\n                <Grid container className=\"about-container\">\r\n                    <Grid md={12} lg={12} item style={{ \"textAlign\": \"center\" }}>\r\n                        <Typography variant=\"h4\" style={{ \"fontFamily\": \"cursive\" }}>\r\n                            About Me\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid md={12} lg={12} item>&nbsp;</Grid>\r\n                    <Grid md={12} lg={12} item>&nbsp;</Grid>\r\n                    <Grid md={12} lg={12} item style={{ \"textAlign\": \"center\" }}>\r\n                        <p style={{ \"fontFamily\": \"cursive\" }}>\r\n                            Hi, I am <a href=\"/\" className=\"custom-a-tag\" style={{ \"fontWeight\": 600 }}>Adit Srivastava</a>,\r\n                            a Full stack developer, Web Scraping Engineer, Machine Learning Engineer, and lot more to come.<br />\r\n                            Currently working as a Associate Software Engineer in Pune, MH.<br />\r\n                            Just here to share my experience, of how I self taught myself to learn all the skills I have and maybe help you<br />\r\n                            in that process.\r\n                        </p>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\n\r\nclass Blog extends Component {\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid md={12} lg={12} item>\r\n                    <h2 style={{ textAlign: \"center\" }}>\r\n                        Under Devvelopment\r\n                    </h2>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react';\r\nimport {\r\n    Grid, AppBar, Toolbar, Typography, Button\r\n} from '@material-ui/core';\r\n\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\n\r\nimport {\r\n    HashRouter as Router, Switch, Route\r\n} from \"react-router-dom\";\r\n\r\nimport '../../css/index.css'\r\nimport About from '../about';\r\nimport Blog from '../blog';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Grid md={12} lg={12} item>\r\n                    <AppBar position=\"static\" className=\"header-style\">\r\n                        <Toolbar>\r\n                            <Grid container>\r\n                                <Grid md={9} lg={9} item>\r\n                                    <a className=\"custom-a-tag\" href=\"/\">\r\n                                        <Typography variant=\"h5\" style={{ \"fontFamily\": \"cursive\" }}>\r\n                                            <span style={{ \"cursor\": \"pointer\" }}>Adit Srivastava</span>\r\n                                        </Typography>\r\n                                    </a>\r\n                                </Grid>\r\n                                <Grid md={1} lg={1} style={{ \"textAlign\": \"center\" }} item>\r\n                                    <Button href=\"/about\" color=\"inherit\" style={{ \"fontFamily\": \"cursive\" }}>About</Button>\r\n                                </Grid>\r\n                                <Grid md={1} lg={1} style={{ \"textAlign\": \"center\" }} item>\r\n                                    <Button target=\"_blank\" href=\"https://www.linkedin.com/in/adit-srivastava/\" color=\"inherit\" style={{ \"fontFamily\": \"cursive\" }}>\r\n                                        <LinkedInIcon style={{ \"color\": \"#0077b5\" }} />\r\n                                        &nbsp;LinkedIn\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid md={1} lg={1} style={{ \"textAlign\": \"center\" }} item>\r\n                                    <Button target=\"_blank\" href=\"https://github.com/aditsrivastava4\" color=\"inherit\" style={{ \"fontFamily\": \"cursive\" }}>\r\n                                        <GitHubIcon />\r\n                                        &nbsp;Github\r\n                                    </Button>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </Grid>\r\n\r\n                <Switch>\r\n                    <Route path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Blog />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nimport NavBar from './components/navbar'\r\nimport { Grid } from '@material-ui/core';\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <NavBar />\r\n                {/* <Grid md={12} lg={12} item>\r\n                    <h2 style={{ textAlign: \"center\" }}>\r\n                        Under Devvelopment<br />\r\n                        By Adit Srivastava\r\n                    </h2>\r\n                </Grid> */}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}